import math
import sys
sys.setrecursionlimit(10**6)

def build(v, l, r):
    # v - number of vertice in tree, l - left border (including), r - right border (not including)
    if r - l == 1:
        tree[v] = arr[l]
        return
    m = (l + r) // 2
    build(2 * v + 2, m, r)
    build(2 * v + 1, l, m)
    tree[v] = min(tree[2 * v + 1], tree[2 * v + 2])



def change(ind, value, v, l, r):
    if ind >= r or ind < l:
        return
    if r - l == 1:
        tree[v] = arr[ind]
        return
    m = (r + l) // 2
    change(ind, value, 2 * v + 2, m, r)
    change(ind, value, 2 * v + 1, l, m)
    tree[v] = min(tree[2 * v + 1], tree[2 * v + 2])


def min_(v, r, l, q_l, q_r):
    if q_l >= l and r >= q_r:
        return tree[v]
    if q_l >= r or q_r <= l:
        return float('inf')
    m = (q_l + q_r) // 2
    return min(min_(2 * v + 2, r, l, m, q_r), min_(2 * v + 1, r, l, q_l, m))


n = int(input())
arr = [int(el) for el in input().split()]
for _ in range(math.ceil(math.log(len(arr), 2)) - len(arr)):
    arr += [float('inf')] # дополняем размер массива до степени двойки фоновыми числами (в случае min - +беск)
tree = [0] * (len(arr) * 2 - 1)
build(0, 0, len(arr))
print(*tree)
for _ in range(5):
    l, r = [int(el) for el in input().split()] # нумерация границ с нуля
    print(min_(0, r, l, 0, len(arr)))
